async def handle_quantity_or_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω –∏–ª–∏ —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if user_data[user_id]['transport'] == 'üöõ –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º':
        user_data[user_id]['quantity'] = query.data.split('_')[1]
    else:
        status_map = {
            'status_unloaded': 'üü¢ –†–∞–∑–≥—Ä—É–∂–µ–Ω–æ',
            'status_not_unloaded': 'üü° –ù–µ —Ä–∞–∑–≥—Ä—É–∂–µ–Ω–æ',
            'status_not_specified': 'üü† –ù–µ —É–∫–∞–∑–∞–Ω–æ'
        }
        user_data[user_id]['status'] = status_map[query.data]

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
    message = f"""
–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {user_data[user_id]['transport']}
–ì—Ä—É–∑: {user_data[user_id]['cargo']}
–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_data[user_id]['sender']}
"""
    if 'quantity' in user_data[user_id]:
        message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω: {user_data[user_id]['quantity']}"
    else:
        message += f"–°—Ç–∞—Ç—É—Å: {user_data[user_id]['status']}"

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm'), InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n{message}", reply_markup=reply_markup)

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—É."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    message = f"""
–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {user_data[user_id]['transport']}
–ì—Ä—É–∑: {user_data[user_id]['cargo']}
–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_data[user_id]['sender']}
"""
    if 'quantity' in user_data[user_id]:
        message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω: {user_data[user_id]['quantity']}"
    else:
        message += f"–°—Ç–∞—Ç—É—Å: {user_data[user_id]['status']}"

    if query.data == 'confirm':
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞–Ω–∞–ª
        try:
            await context.bot.send_message(chat_id=CHANNEL_ID, text=f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n{message}")
            await query.edit_message_text(text="–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
            await query.edit_message_text(text="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:  # –û—Ç–º–µ–Ω–∞
        await query.edit_message_text(text="–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    user_data.pop(user_id, None)
    await start(update, context)

async def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_transport, pattern='^transport_'))
    application.add_handler(CallbackQueryHandler(handle_cargo, pattern='^cargo_'))
    application.add_handler(CallbackQueryHandler(handle_sender, pattern='^sender_'))
    application.add_handler(CallbackQueryHandler(handle_sender_choice, pattern='^sender_'))
    application.add_handler(CallbackQueryHandler(handle_quantity_or_status, pattern='^(quantity_|status_)'))
    application.add_handler(CallbackQueryHandler(handle_confirmation, pattern='^(confirm|cancel)$'))

    await application.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
