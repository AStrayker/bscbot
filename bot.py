import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# Telegram —Ç–æ–∫–µ–Ω
API_TOKEN = '6072615655:AAHQh3BVU3HNHd3p7vfvE3JsBzfHiG-hNMU'
CHANNEL_ID = '@precoinmarket_channel'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# FSM (—Å–æ—Å—Ç–æ—è–Ω–∏—è)
class OrderState(StatesGroup):
    choosing_transport = State()
    choosing_cargo = State()
    choosing_sender = State()
    choosing_quantity = State()
    choosing_status = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
async def send_message_with_keyboard(user_id, text, keyboard):
    try:
        await bot.send_message(user_id, text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –®–∞–≥ 1: –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_data[message.from_user.id] = {}  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    await choose_transport(message)

# –®–∞–≥ 2: –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
async def choose_transport(message):
    keyboard = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üöõ–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º", callback_data="transport_auto"),
        InlineKeyboardButton("üöÇ–í–∞–≥–æ–Ω–∞–º–∏", callback_data="transport_train")
    )
    await send_message_with_keyboard(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:", keyboard)
    await OrderState.choosing_transport.set()

@dp.callback_query_handler(lambda c: c.data.startswith('transport'), state=OrderState.choosing_transport)
async def transport_handler(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    transport_type = "üöõ–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º" if callback_query.data == "transport_auto" else "üöÇ–í–∞–≥–æ–Ω–∞–º–∏"
    user_data[user_id]['transport'] = transport_type

    cargo_options = [
        "–ü–µ—Å–æ–∫", "–¶–µ–º–µ–Ω—Ç –ú500", "–¶–µ–º–µ–Ω—Ç –ú400", "–©–µ–±–µ–Ω—å 5x10",
        "–©–µ–±–µ–Ω—å 5x20", "–©–µ–±–µ–Ω—å 10x20", "–©–µ–±–µ–Ω—å 20x40", "–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç"
    ]
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(*(InlineKeyboardButton(cargo, callback_data=f"cargo_{cargo}") for cargo in cargo_options))

    await send_message_with_keyboard(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–∑:", keyboard)
    await OrderState.choosing_cargo.set()

# –®–∞–≥ 3: –í—ã–±–æ—Ä –≥—Ä—É–∑–∞
@dp.callback_query_handler(lambda c: c.data.startswith('cargo'), state=OrderState.choosing_cargo)
async def cargo_handler(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    cargo = callback_query.data.split('_')[1]
    user_data[user_id]['cargo'] = cargo

    if cargo == "–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç":
        keyboard = InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("–ü—Ä–æ–≤–æ–ª–æ–∫–∞", callback_data="metal_provoloka"),
            InlineKeyboardButton("–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç", callback_data="metal_metal")
        )
        await send_message_with_keyboard(user_id, "–£—Ç–æ—á–Ω–∏—Ç–µ —Ç–∏–ø –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞:", keyboard)
        await OrderState.choosing_sender.set()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    else:
        await choose_sender(user_id)

# –®–∞–≥ 3.1: –¢–∏–ø –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞
@dp.callback_query_handler(lambda c: c.data.startswith('metal'), state=OrderState.choosing_sender)
async def metal_handler(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    metal_type = "–ü—Ä–æ–≤–æ–ª–æ–∫–∞" if callback_query.data == "metal_provoloka" else "–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç"
    user_data[user_id]['cargo'] = metal_type
    await choose_sender(user_id)

# –®–∞–≥ 4: –í—ã–±–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
async def choose_sender(user_id):
    sender_options = [
        "–ö—Ä–∏–≤–æ–π –†–æ–≥ –¶–µ–º–µ–Ω—Ç", "–°–ø–µ—Ü–ö–∞—Ä—å–µ—Ä", "–°–º–∞—Ä—Ç –ì—Ä–∞–Ω–∏—Ç",
        "–ë–∞–ª–æ–≤—Å–∫–∏–µ –ü–µ—Å–∫–∏", "–õ—é–±–∏–º–æ–≤—Å–∫–∏–π –ö–∞—Ä—å–µ—Ä", "–¢–û–í –ú–ö–ö ‚Ññ3", "–ù–æ–≤–∞—Ç–æ—Ä"
    ]
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(*(InlineKeyboardButton(sender, callback_data=f"sender_{sender}") for sender in sender_options))

    await send_message_with_keyboard(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:", keyboard)
    await OrderState.choosing_sender.set()

@dp.callback_query_handler(lambda c: c.data.startswith('sender'), state=OrderState.choosing_sender)
async def sender_handler(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    sender = callback_query.data.split('_')[1]
    user_data[user_id]['sender'] = sender

    transport = user_data[user_id].get('transport', '')

    if transport == "üöõ–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º":
        keyboard = InlineKeyboardMarkup(row_width=3).add(
            *(InlineKeyboardButton(str(i), callback_data=f"quantity_{i}") for i in range(1, 6))
        )
        await send_message_with_keyboard(user_id, "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω:", keyboard)
        await OrderState.choosing_quantity.set()
    elif transport == "üöÇ–í–∞–≥–æ–Ω–∞–º–∏":
        keyboard = InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("üü¢–†–∞–∑–≥—Ä—É–∂–µ–Ω–æ", callback_data="status_unloaded"),
            InlineKeyboardButton("üü°–ù–µ —Ä–∞–∑–≥—Ä—É–∂–µ–Ω–æ", callback_data="status_not_unloaded"),
            InlineKeyboardButton("üü†–ù–µ —É–∫–∞–∑–∞–Ω–æ", callback_data="status_not_specified")
        )
        await send_message_with_keyboard(user_id, "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:", keyboard)
        await OrderState.choosing_status.set()

# –®–∞–≥ 5: –£–∫–∞–∑–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—à–∏–Ω
@dp.callback_query_handler(lambda c: c.data.startswith('quantity'), state=OrderState.choosing_quantity)
async def quantity_handler(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    quantity = callback_query.data.split('_')[1]
    user_data[user_id]['quantity'] = quantity
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await confirm_order(user_id)

# –®–∞–≥ 5: –£–∫–∞–∑–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –≤–∞–≥–æ–Ω–æ–≤
@dp.callback_query_handler(lambda c: c.data.startswith('status'), state=OrderState.choosing_status)
async def status_handler(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    status_map = {
        "status_unloaded": "üü¢–†–∞–∑–≥—Ä—É–∂–µ–Ω–æ",
        "status_not_unloaded": "üü°–ù–µ —Ä–∞–∑–≥—Ä—É–∂–µ–Ω–æ",
        "status_not_specified": "üü†–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    }
    status = status_map[callback_query.data]
    user_data[user_id]['status'] = status
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await confirm_order(user_id)

# –®–∞–≥ 6: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async def confirm_order(user_id):
    data = user_data.get(user_id, {})
    if not data:
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    message = (
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {data.get('transport', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–ì—Ä—É–∑: {data.get('cargo', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {data.get('sender', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    )
    if data.get('transport') == "üöõ–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º":
        message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω: {data.get('quantity', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    elif data.get('transport') == "üöÇ–í–∞–≥–æ–Ω–∞–º–∏":
        message += f"–°—Ç–∞—Ç—É—Å: {data.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

    keyboard = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    )

    await send_message_with_keyboard(user_id, message, keyboard)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞
@dp.callback_query_handler(lambda c: c.data == "confirm", state="*")
async def confirm_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
    await choose_transport(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == "cancel", state="*")
async def cancel_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
    await choose_transport(callback_query.message)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
