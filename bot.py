# bot.py
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# Telegram —Ç–æ–∫–µ–Ω
API_TOKEN = '6072615655:AAHQh3BVU3HNHd3p7vfvE3JsBzfHiG-hNMU'
CHANNEL_ID = '@precoinmarket_channel'

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# FSM (—Å–æ—Å—Ç–æ—è–Ω–∏—è)
class OrderState(StatesGroup):
    choosing_quantity = State()
    choosing_status = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
async def send_start_message(user_id):
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–êüöõ–≤—Ç–æ–º–æ–±–∏–ª–µ–º", callback_data="transport_auto"),
        InlineKeyboardButton("üöÇ–í–∞–≥–æ–Ω–∞–º–∏", callback_data="transport_train")
    )
    await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:", reply_markup=keyboard)

# –®–∞–≥ 1: –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_data[message.from_user.id] = {}
    await send_start_message(message.from_user.id)

# –®–∞–≥ 2: –í—ã–±–æ—Ä –≥—Ä—É–∑–∞
@dp.callback_query_handler(lambda c: c.data.startswith('transport'))
async def transport_handler(callback_query: CallbackQuery):
    transport_type = "üöõ–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º" if callback_query.data == "transport_auto" else "üöÇ–í–∞–≥–æ–Ω–∞–º–∏"
    user_data[callback_query.from_user.id]['transport'] = transport_type

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–∑–∞
    keyboard = InlineKeyboardMarkup(row_width=2)
    cargo_options = [
        "–ü–µ—Å–æ–∫", "–¶–µ–º–µ–Ω—Ç –ú500", "–¶–µ–º–µ–Ω—Ç –ú400", "–©–µ–±–µ–Ω—å 5x10",
        "–©–µ–±–µ–Ω—å 5x20", "–©–µ–±–µ–Ω—å 10x20", "–©–µ–±–µ–Ω—å 20x40", "–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç"
    ]
    for cargo in cargo_options:
        keyboard.add(InlineKeyboardButton(cargo, callback_data=f"cargo_{cargo}"))
    
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–∑:", reply_markup=keyboard)

# –®–∞–≥ 3: –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç, —É—Ç–æ—á–Ω—è–µ–º —Ç–∏–ø –≥—Ä—É–∑–∞
@dp.callback_query_handler(lambda c: c.data.startswith('cargo'))
async def cargo_handler(callback_query: CallbackQuery):
    cargo = callback_query.data.split('_')[1]
    user_data[callback_query.from_user.id]['cargo'] = cargo

    if cargo == "–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç":
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("–ü—Ä–æ–≤–æ–ª–æ–∫–∞", callback_data="metal_provoloka"),
            InlineKeyboardButton("–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç", callback_data="metal_metal")
        )
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–∞:", reply_markup=keyboard)
    else:
        await choose_sender(callback_query.from_user.id)

@dp.callback_query_handler(lambda c: c.data.startswith('metal'))
async def metal_handler(callback_query: CallbackQuery):
    metal_type = "–ü—Ä–æ–≤–æ–ª–æ–∫–∞" if callback_query.data == "metal_provoloka" else "–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç"
    user_data[callback_query.from_user.id]['cargo'] = metal_type
    await choose_sender(callback_query.from_user.id)

# –®–∞–≥ 4: –í—ã–±–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
async def choose_sender(user_id):
    keyboard = InlineKeyboardMarkup(row_width=2)
    sender_options = [
        "–ö—Ä–∏–≤–æ–π –†–æ–≥ –¶–µ–º–µ–Ω—Ç", "–°–ø–µ—Ü–ö–∞—Ä—å–µ—Ä", "–°–º–∞—Ä—Ç –ì—Ä–∞–Ω–∏—Ç",
        "–ë–∞–ª–æ–≤—Å–∫–∏–µ –ü–µ—Å–∫–∏", "–õ—é–±–∏–º–æ–≤—Å–∫–∏–π –ö–∞—Ä—å–µ—Ä", "–¢–û–í –ú–ö–ö ‚Ññ3", "–ù–æ–≤–∞—Ç–æ—Ä"
    ]
    for sender in sender_options:
        keyboard.add(InlineKeyboardButton(sender, callback_data=f"sender_{sender}"))
    
    await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('sender'))
async def sender_handler(callback_query: CallbackQuery):
    sender = callback_query.data.split('_')[1]
    user_data[callback_query.from_user.id]['sender'] = sender

    transport = user_data[callback_query.from_user.id].get('transport', '')

    if transport == "üöõ–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º":
        # –î–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: –£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω
        keyboard = InlineKeyboardMarkup(row_width=3)
        for i in range(1, 6):
            keyboard.add(InlineKeyboardButton(str(i), callback_data=f"quantity_{i}"))
        await bot.send_message(callback_query.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º):", reply_markup=keyboard)
        await OrderState.choosing_quantity.set()
    elif transport == "üöÇ–í–∞–≥–æ–Ω–∞–º–∏":
        # –î–ª—è –≤–∞–≥–æ–Ω–æ–≤: –£–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üü¢–†–∞–∑–≥—Ä—É–∂–µ–Ω–æ", callback_data="status_unloaded"),
            InlineKeyboardButton("üü°–ù–µ —Ä–∞–∑–≥—Ä—É–∂–µ–Ω–æ", callback_data="status_not_unloaded"),
            InlineKeyboardButton("üü†–ù–µ —É–∫–∞–∑–∞–Ω–æ", callback_data="status_not_specified")
        )
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:", reply_markup=keyboard)
        await OrderState.choosing_status.set()

# –®–∞–≥ 5: –£–∫–∞–∑–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—à–∏–Ω
@dp.callback_query_handler(lambda c: c.data.startswith('quantity'), state=OrderState.choosing_quantity)
async def quantity_handler(callback_query: CallbackQuery, state: FSMContext):
    quantity = callback_query.data.split('_')[1]
    user_data[callback_query.from_user.id]['quantity'] = quantity
    await state.finish()
    await confirm_order(callback_query.from_user.id)

@dp.message_handler(state=OrderState.choosing_quantity)
async def quantity_text_handler(message: types.Message, state: FSMContext):
    user_data[message.from_user.id]['quantity'] = message.text
    await state.finish()
    await confirm_order(message.from_user.id)

# –®–∞–≥ 5: –£–∫–∞–∑–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –≤–∞–≥–æ–Ω–æ–≤
@dp.callback_query_handler(lambda c: c.data.startswith('status'), state=OrderState.choosing_status)
async def status_handler(callback_query: CallbackQuery, state: FSMContext):
    status_map = {
        "status_unloaded": "üü¢–†–∞–∑–≥—Ä—É–∂–µ–Ω–æ",
        "status_not_unloaded": "üü°–ù–µ —Ä–∞–∑–≥—Ä—É–∂–µ–Ω–æ",
        "status_not_specified": "üü†–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    }
    status = status_map[callback_query.data]
    user_data[callback_query.from_user.id]['status'] = status
    await state.finish()
    await confirm_order(callback_query.from_user.id)

# –®–∞–≥ 6: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
async def confirm_order(user_id):
    data = user_data[user_id]
    transport = data.get('transport', '–ù–µ —É–∫–∞–∑–∞–Ω')
    cargo = data.get('cargo', '–ù–µ —É–∫–∞–∑–∞–Ω')
    sender = data.get('sender', '–ù–µ —É–∫–∞–∑–∞–Ω')
    quantity = data.get('quantity', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    status = data.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

    message = (
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {transport}\n"
        f"–ì—Ä—É–∑: {cargo}\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender}\n"
    )
    if transport == "üöõ–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º":
        message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω: {quantity}\n"
    elif transport == "üöÇ–í–∞–≥–æ–Ω–∞–º–∏":
        message += f"–°—Ç–∞—Ç—É—Å: {status}\n"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    await bot.send_message(user_id, message, reply_markup=keyboard)

# –®–∞–≥ 7: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.callback_query_handler(lambda c: c.data == "confirm")
async def confirm_handler(callback_query: CallbackQuery):
    data = user_data.pop(callback_query.from_user.id, {})
    transport = data.get('transport', '–ù–µ —É–∫–∞–∑–∞–Ω')
    cargo = data.get('cargo', '–ù–µ —É–∫–∞–∑–∞–Ω')
    sender = data.get('sender', '–ù–µ —É–∫–∞–∑–∞–Ω')
    quantity = data.get('quantity', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    status = data.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

    message = (
        f"üöõ–ù–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µüîî\n"
        f"_______\n"
        f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {transport}\n"
        f"–ì—Ä—É–∑: {cargo}\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender}\n"
    )
    if transport == "–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º":
        message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω: {quantity}\n"
    elif transport == "–í–∞–≥–æ–Ω–∞–º–∏":
        message += f"–°—Ç–∞—Ç—É—Å: {status}\n"
    
    await bot.send_message(CHANNEL_ID, message)
    await bot.send_message(callback_query.from_user.id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")

# –û—Ç–º–µ–Ω–∞
@dp.callback_query_handler(lambda c: c.data == "cancel")
async def cancel_handler(callback_query: CallbackQuery):
    user_data.pop(callback_query.from_user.id, None)
    await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await send_start_message(callback_query.from_user.id)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
