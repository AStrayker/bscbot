import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext

# Telegram —Ç–æ–∫–µ–Ω
API_TOKEN = '6072615655:AAHQh3BVU3HNHd3p7vfvE3JsBzfHiG-hNMU'
CHANNEL_ID = '@precoinmarket_channel'

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
async def send_message_with_keyboard(user_id, text, keyboard):
    try:
        await bot.send_message(user_id, text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –®–∞–≥ 2: –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith('transport'))
async def transport_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    transport_type = "üöõ–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º" if callback_query.data == "transport_auto" else "üöÇ–í–∞–≥–æ–Ω–∞–º–∏"
    user_data[user_id] = {'transport': transport_type}

    cargo_options = [
        "–ü–µ—Å–æ–∫", "–¶–µ–º–µ–Ω—Ç –ú500", "–¶–µ–º–µ–Ω—Ç –ú400", "–©–µ–±–µ–Ω—å 5x10",
        "–©–µ–±–µ–Ω—å 5x20", "–©–µ–±–µ–Ω—å 10x20", "–©–µ–±–µ–Ω—å 20x40", "–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç"
    ]
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(*(InlineKeyboardButton(cargo, callback_data=f"cargo_{cargo}") for cargo in cargo_options))

    await send_message_with_keyboard(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–∑:", keyboard)

# –®–∞–≥ 3: –í—ã–±–æ—Ä –≥—Ä—É–∑–∞
@dp.callback_query_handler(lambda c: c.data.startswith('cargo'))
async def cargo_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    cargo = callback_query.data.split('_')[1]
    user_data[user_id]['cargo'] = cargo

    if cargo == "–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç":
        keyboard = InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("–ü—Ä–æ–≤–æ–ª–æ–∫–∞", callback_data="metal_provoloka"),
            InlineKeyboardButton("–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç", callback_data="metal_metal")
        )
        await send_message_with_keyboard(user_id, "–£—Ç–æ—á–Ω–∏—Ç–µ —Ç–∏–ø –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞:", keyboard)
    else:
        await choose_sender(user_id)

# –®–∞–≥ 3.1: –¢–∏–ø –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞
@dp.callback_query_handler(lambda c: c.data.startswith('metal'))
async def metal_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    metal_type = "–ü—Ä–æ–≤–æ–ª–æ–∫–∞" if callback_query.data == "metal_provoloka" else "–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç"
    user_data[user_id]['cargo'] = metal_type
    await choose_sender(user_id)

# –®–∞–≥ 4: –í—ã–±–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
async def choose_sender(user_id):
    sender_options = [
        "–ö—Ä–∏–≤–æ–π –†–æ–≥ –¶–µ–º–µ–Ω—Ç", "–°–ø–µ—Ü–ö–∞—Ä—å–µ—Ä", "–°–º–∞—Ä—Ç –ì—Ä–∞–Ω–∏—Ç",
        "–ë–∞–ª–æ–≤—Å–∫–∏–µ –ü–µ—Å–∫–∏", "–õ—é–±–∏–º–æ–≤—Å–∫–∏–π –ö–∞—Ä—å–µ—Ä", "–¢–û–í –ú–ö–ö ‚Ññ3", "–ù–æ–≤–∞—Ç–æ—Ä"
    ]
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(*(InlineKeyboardButton(sender, callback_data=f"sender_{sender}") for sender in sender_options))

    await send_message_with_keyboard(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:", keyboard)

# –®–∞–≥ 5: –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—à–∏–Ω
@dp.callback_query_handler(lambda c: c.data.startswith('quantity'))
async def quantity_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    quantity = callback_query.data.split('_')[1]
    user_data[user_id]['quantity'] = quantity

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    transport = user_data[user_id].get('transport', '')
    cargo = user_data[user_id].get('cargo', '')
    sender = user_data[user_id].get('sender', '')
    message = f"–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport}\n–ì—Ä—É–∑: {cargo}\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω: {quantity}"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
    await bot.send_message(CHANNEL_ID, message)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback_query.message.edit_text("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")

    # –í–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–≥—É 2 —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    await transport_step(callback_query.message)

# –®–∞–≥ 6: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.callback_query_handler(lambda c: c.data == "confirm")
async def confirm_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    data = user_data[user_id]

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = f"–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {data.get('transport')}\n–ì—Ä—É–∑: {data.get('cargo')}\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {data.get('sender')}"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
    await bot.send_message(CHANNEL_ID, message)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback_query.message.edit_text("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")

    # –í–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–≥—É 2 —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    await transport_step(callback_query.message)

# –®–∞–≥ 7: –û—Ç–º–µ–Ω–∞
@dp.callback_query_handler(lambda c: c.data == "cancel")
async def cancel_handler(callback_query: CallbackQuery):
    await callback_query.message.edit_text("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")

    # –í–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–≥—É 2
    await transport_step(callback_query.message)

# –®–∞–≥ 2: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
async def transport_step(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üöõ–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º", callback_data="transport_auto"))
    keyboard.add(InlineKeyboardButton("üöÇ–í–∞–≥–æ–Ω–∞–º–∏", callback_data="transport_train"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:", reply_markup=keyboard)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
