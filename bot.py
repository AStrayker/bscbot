import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# Telegram —Ç–æ–∫–µ–Ω
API_TOKEN = '6072615655:AAHQh3BVU3HNHd3p7vfvE3JsBzfHiG-hNMU'
CHANNEL_ID = '@precoinmarket_channel'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# FSM (—Å–æ—Å—Ç–æ—è–Ω–∏—è)
class OrderState(StatesGroup):
    choosing_quantity = State()
    choosing_status = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ–Ω—é
transport_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("üöõ–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º"),
    KeyboardButton("üöÇ–í–∞–≥–æ–Ω–∞–º–∏"),
)

cargo_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("–ü–µ—Å–æ–∫"),
    KeyboardButton("–¶–µ–º–µ–Ω—Ç –ú500"),
    KeyboardButton("–¶–µ–º–µ–Ω—Ç –ú400"),
    KeyboardButton("–©–µ–±–µ–Ω—å 5x10"),
    KeyboardButton("–©–µ–±–µ–Ω—å 10x20"),
    KeyboardButton("–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç"),
)

sender_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("–ö—Ä–∏–≤–æ–π –†–æ–≥ –¶–µ–º–µ–Ω—Ç"),
    KeyboardButton("–°–ø–µ—Ü–ö–∞—Ä—å–µ—Ä"),
    KeyboardButton("–°–º–∞—Ä—Ç –ì—Ä–∞–Ω–∏—Ç"),
    KeyboardButton("–ë–∞–ª–æ–≤—Å–∫–∏–µ –ü–µ—Å–∫–∏"),
    KeyboardButton("–õ—é–±–∏–º–æ–≤—Å–∫–∏–π –ö–∞—Ä—å–µ—Ä"),
    KeyboardButton("–¢–û–í –ú–ö–ö ‚Ññ3"),
    KeyboardButton("–ù–æ–≤–∞—Ç–æ—Ä"),
)

status_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("üü¢–†–∞–∑–≥—Ä—É–∂–µ–Ω–æ"),
    KeyboardButton("üü°–ù–µ —Ä–∞–∑–≥—Ä—É–∂–µ–Ω–æ"),
    KeyboardButton("üü†–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
)

confirm_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
    KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å"),
)


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    user_data[message.from_user.id] = {}
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:", reply_markup=transport_menu)


@dp.message_handler(lambda message: message.text in ["üöõ–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º", "üöÇ–í–∞–≥–æ–Ω–∞–º–∏"])
async def transport_handler(message: types.Message):
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."""
    user_data[message.from_user.id]["transport"] = message.text
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–∑:", reply_markup=cargo_menu)


@dp.message_handler(lambda message: message.text in ["–ü–µ—Å–æ–∫", "–¶–µ–º–µ–Ω—Ç –ú500", "–¶–µ–º–µ–Ω—Ç –ú400", "–©–µ–±–µ–Ω—å 5x10", "–©–µ–±–µ–Ω—å 10x20", "–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç"])
async def cargo_handler(message: types.Message):
    """–í—ã–±–æ—Ä –≥—Ä—É–∑–∞."""
    user_data[message.from_user.id]["cargo"] = message.text
    if message.text == "–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(
            KeyboardButton("–ü—Ä–æ–≤–æ–ª–æ–∫–∞"),
            KeyboardButton("–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç"),
        ))
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:", reply_markup=sender_menu)


@dp.message_handler(lambda message: message.text in ["–ü—Ä–æ–≤–æ–ª–æ–∫–∞", "–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç"])
async def metal_type_handler(message: types.Message):
    """–£—Ç–æ—á–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞."""
    user_data[message.from_user.id]["cargo"] = message.text
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:", reply_markup=sender_menu)


@dp.message_handler(lambda message: message.text in ["–ö—Ä–∏–≤–æ–π –†–æ–≥ –¶–µ–º–µ–Ω—Ç", "–°–ø–µ—Ü–ö–∞—Ä—å–µ—Ä", "–°–º–∞—Ä—Ç –ì—Ä–∞–Ω–∏—Ç", "–ë–∞–ª–æ–≤—Å–∫–∏–µ –ü–µ—Å–∫–∏", "–õ—é–±–∏–º–æ–≤—Å–∫–∏–π –ö–∞—Ä—å–µ—Ä", "–¢–û–í –ú–ö–ö ‚Ññ3", "–ù–æ–≤–∞—Ç–æ—Ä"])
async def sender_handler(message: types.Message):
    """–í—ã–±–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è."""
    user_data[message.from_user.id]["sender"] = message.text
    transport = user_data[message.from_user.id]["transport"]
    if transport == "üöõ–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º":
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4):")
        await OrderState.choosing_quantity.set()
    elif transport == "üöÇ–í–∞–≥–æ–Ω–∞–º–∏":
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:", reply_markup=status_menu)
        await OrderState.choosing_status.set()


@dp.message_handler(state=OrderState.choosing_quantity)
async def quantity_handler(message: types.Message, state: FSMContext):
    """–£–∫–∞–∑–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—à–∏–Ω."""
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω (—á–∏—Å–ª–æ):")
        return

    user_data[message.from_user.id]["quantity"] = message.text
    await state.finish()
    await confirm_order(message.from_user.id)


@dp.message_handler(lambda message: message.text in ["üü¢–†–∞–∑–≥—Ä—É–∂–µ–Ω–æ", "üü°–ù–µ —Ä–∞–∑–≥—Ä—É–∂–µ–Ω–æ", "üü†–ù–µ —É–∫–∞–∑–∞–Ω–æ"], state=OrderState.choosing_status)
async def status_handler(message: types.Message, state: FSMContext):
    """–£–∫–∞–∑–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –≤–∞–≥–æ–Ω–æ–≤."""
    user_data[message.from_user.id]["status"] = message.text
    await state.finish()
    await confirm_order(message.from_user.id)


async def confirm_order(user_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞."""
    data = user_data.get(user_id, {})
    if not data:
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    message = (
        f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {data.get('transport', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–ì—Ä—É–∑: {data.get('cargo', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {data.get('sender', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    )
    if data.get("transport") == "üöõ–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º":
        message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω: {data.get('quantity', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    elif data.get("transport") == "üöÇ–í–∞–≥–æ–Ω–∞–º–∏":
        message += f"–°—Ç–∞—Ç—É—Å: {data.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

    await bot.send_message(user_id, message, reply_markup=confirm_menu)


@dp.message_handler(lambda message: message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def confirm_handler(message: types.Message):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª."""
    user_id = message.from_user.id
    data = user_data.pop(user_id, {})
    if not data:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    channel_message = (
        f"üöõ–ù–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µüîî\n"
        f"_______\n"
        f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {data.get('transport', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–ì—Ä—É–∑: {data.get('cargo', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {data.get('sender', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    )
    if data.get("transport") == "üöõ–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º":
        channel_message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω: {data.get('quantity', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    elif data.get("transport") == "üöÇ–í–∞–≥–æ–Ω–∞–º–∏":
        channel_message += f"–°—Ç–∞—Ç—É—Å: {data.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

    await bot.send_message(CHANNEL_ID, channel_message)
    await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª!", reply_markup=transport_menu)


@dp.message_handler(lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_handler(message: types.Message):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    user_data.pop(message.from_user.id, None)
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=transport_menu)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
