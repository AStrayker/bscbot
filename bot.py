# bot.py
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor

# Telegram —Ç–æ–∫–µ–Ω
API_TOKEN = '6072615655:AAHQh3BVU3HNHd3p7vfvE3JsBzfHiG-hNMU'
CHANNEL_ID = '@hbsc_ceh'

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –®–∞–≥ 1: –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_data[message.from_user.id] = {}
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üöõ–°–æ–æ–±—â–∏—Ç—å –æ —Ç–æ–≤–∞—Ä–µ", callback_data="scenario_1"))
    keyboard.add(InlineKeyboardButton("üöÇ–¢–æ–≤–∞—Ä –≤ –≤–∞–≥–æ–Ω–∞—Ö", callback_data="scenario_2"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=keyboard)

# –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('scenario'))
async def scenario_handler(callback_query: CallbackQuery):
    scenario = callback_query.data
    user_data[callback_query.from_user.id]['scenario'] = scenario
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(*[InlineKeyboardButton(name, callback_data=f"cargo_{name}") for name in [
        "–ü–µ—Å–æ–∫", "–¶–µ–º–µ–Ω—Ç –ú500", "–¶–µ–º–µ–Ω—Ç –ú400", "–©–µ–±–µ–Ω—å 5x10", "–©–µ–±–µ–Ω—å 5x20", "–©–µ–±–µ–Ω—å 10x20", "–©–µ–±–µ–Ω—å 20x40", "–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç"
    ]])
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–ª–∏ –º–∞—Ä–∫—É/—Ñ—Ä–∞–∫—Ü–∏—é –≥—Ä—É–∑–∞:", reply_markup=keyboard)

# –®–∞–≥ 3: –í—ã–±–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
@dp.callback_query_handler(lambda c: c.data.startswith('cargo'))
async def cargo_handler(callback_query: CallbackQuery):
    cargo = callback_query.data.split('_')[1]
    user_data[callback_query.from_user.id]['cargo'] = cargo
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(*[InlineKeyboardButton(name, callback_data=f"sender_{name}") for name in [
        "–ö—Ä–∏–≤–æ–π —Ä–æ–≥ —Ü–µ–º–µ–Ω—Ç", "–°–ø–µ—Ü–ö–∞—Ä—å–µ—Ä", "–°–º–∞—Ä—Ç –ì—Ä–∞–Ω–∏—Ç", "–ë–∞–ª–æ–≤—Å–∫–∏–µ –ø–µ—Å–∫–∏", "–õ—é–±–∏–º–æ–≤—Å–∫–∏–π –∫–∞—Ä—å–µ—Ä", "–ë–æ—Ä–æ–¥–∞–≤—Å–∫–∏–π –∫–∞—Ä—å–µ—Ä", "–¢–û–í –ú–ö–ö ‚Ññ3", "–ù–æ–≤–∞—Ç–æ—Ä"
    ]])
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä–æ-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:", reply_markup=keyboard)

# –®–∞–≥ 4: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.callback_query_handler(lambda c: c.data.startswith('sender'))
async def sender_handler(callback_query: CallbackQuery):
    sender = callback_query.data.split('_')[1]
    user_data[callback_query.from_user.id]['sender'] = sender
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = user_data[callback_query.from_user.id]
    transport = "–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º" if data['scenario'] == "scenario_1" else "–í–∞–≥–æ–Ω–∞–º–∏"
    message = (
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:\n"
        f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {transport}\n"
        f"–ì—Ä—É–∑: {data['cargo']}\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {data['sender']}"
    )
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"))
    keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    
    await bot.send_message(callback_query.from_user.id, message, reply_markup=keyboard)

# –®–∞–≥ 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
@dp.callback_query_handler(lambda c: c.data == "confirm")
async def confirm_handler(callback_query: CallbackQuery):
    data = user_data.pop(callback_query.from_user.id, {})
    transport = "–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º" if data['scenario'] == "scenario_1" else "–í–∞–≥–æ–Ω–∞–º–∏"
    message = (
        f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
        f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {transport}\n"
        f"–ì—Ä—É–∑: {data['cargo']}\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {data['sender']}"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
    await bot.send_message(CHANNEL_ID, message)
    await bot.send_message(callback_query.from_user.id, "–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª!")

# –®–∞–≥ 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
@dp.callback_query_handler(lambda c: c.data == "cancel")
async def cancel_handler(callback_query: CallbackQuery):
    user_data.pop(callback_query.from_user.id, None)
    await bot.send_message(callback_query.from_user.id, "–û—Ç–º–µ–Ω–µ–Ω–æ.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
